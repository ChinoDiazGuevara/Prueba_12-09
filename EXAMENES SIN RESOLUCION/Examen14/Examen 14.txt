public class Profesor extends Persona{
	private List<String> especialidades;
	private int distanciaASede;
	private string telefono;

public Profesor (String dni,String nombre,integer distanciaASede, String telefono){
	super(dni,nombre);
	this.distanciaASede=distanciaASede;
	this.telefono=telefono;
	especialidad=new ArrayList<>();	
}

public List<String> getEspecialidades(){
	return especialidades;
}	

public integer getDistanciaASede(){
	return distanciaASede;
}

public String getTelefono(){
	return telefono;
}

public void addEspecialidad (String especialidad){
	for(String orientacion:especialidades){
		if(!orientacion.equals(especialidad)){
			especialidades.add(especialidad);
		}
	}
}

@Override
public String toString(){
	return super.getdni()+", "+
	super.getNombre()+", "+
	this.telefono+", "+
	this.especialidades.size()+", "+
	this.distnaciaASede; 	
}

Implementacion de getMejorSuplente en CURSO

public Profesor getMejorSuplente(int distancia){
	Profesor mejor=null;
	for(Profesor profsupl:suplentes){
		if(profsupl.getDistanciaASede()<=distancia && profsupl.getTelefono()!=""){
                  if(profsupl.getEspecialidades().size()<mejor.getEspecialidades().size()){
                    mejor=profsupl;
                    distancia=mejor.getDistanciaASede();
                  }
		}
	}
        return mejor;
}


public boolean agregarAlumno(Alumno alumnoNuevo){
    if(alumnoNuevo.getLocalidad().equals("Posadas")&& modalidad.equals("Presencial")&& alumnos.size()<=cupo){
        alumnos.add(alumnoNuevo);
        return true;
    }
    if(modalidad.equals("Virtual")){
        alumnos.add(alumnoNuevo);
    }
    return false;
}

c1.agregarAlumno(a1); 	
c1.agregarAlumno(a2); 
c1.agregarAlumno(a3);        
c2.agregarAlumno(a1); 
c2.agregarAlumno(a2); 
c2.agregarAlumno(a3);        
c3.agregarAlumno(a1); 
c3.agregarAlumno(a2); 
c3.agregarAlumno(a3);
System.out.println(c1.getAlumnos().size()); 3
System.out.println(c2.getAlumnos().size()); 2
System.out.println(c3.getAlumnos().size()); 2


EJERCICIO 5
SELECT Alumno.localidad, AVG(Nota.nota) Curso.nombre FROM Nota INNER JOIN Alumno ON Nota.idAlumno=Alumno.idAlumno 
INNER JOIN Curso ON Nota.idCurso=Curso.idcurso WHERE Curso.nombre="Java" && Alumno.localidad!="Posadas" ORDER BY Nota.nota






}