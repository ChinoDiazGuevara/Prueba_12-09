EJERCICIO 1:
public TrabajoPracticoIntegrador extends TrabajoPractico{
	private float puntajeMinimoPorEjercicio;

public TrabajoPracticoIntegrador(String tema, float puntajeDeAprobacion, float puntajeMinimoPorEjercicio){
	super(tema,puntajeDeAprobacion);
	this.puntajeMinimoPorEjercicio=puntajeMinimoPorEjercicio;
}

@Override
public boolean addEjercicio(Ejercicio ejercicio){
	if(ejercicio.getPuntajeMaximo()>this.puntajeMinimoPorEjercicio){
		return super.addEjercicio(ejercicio);
	}
return false;
}



EJERCICIO 2: Se aplica en la clase Alumno

public boolean condicionAlumno(String tema){
for(TrabajoPractico trabajos:trabajosPracticos){
	for(List<String> resp:respuestas){
		if(trabajos.esDeTema(tema)&&resp.get().estaAprobado(resp)){
			return true;
		}
	}
}
return false;
}
}

EJERCICIO 3:
@Override
public boolean estaAprobado(List<String> respuestas){
int correctas=0;
	for(Ejercicio ejer:ejercicios){
	for(String resp:respuestas){
		if(ejer.resueltoCorrectamente(resp)){
			correctas++;
		}
	}
}	
 if(super.estaAprobado(resp)&&correctas>minimoEjerciciosCorrectos){
	return true;
	}
	return false;
}

EJERCICIO 4:
ejercicio 1 ejercicio 2 ejercicio 3 ejercicio 4
ejercicio 3 ejercicio 4 ejercicio 5

EJERCICIO 5:

SELECT (Respuesta.idAlumno) SUM(Respuesta.puntaje)
FROM Respuesta
INNER JOIN Ejercicio
ON Respuesta.idEjercicio=Ejercicio.idEjercicio
INNER JOIN TrabajoPractico
ON Ejercicio.idTrabajoPractico=TrabajoPractico.idTrabajoPractico
WHERE TrabajoPractico.tema="geografia politica"
GROUP BY Ejercicio.puntajeMaximo ORDER BY DESC 

3  6
2  7
